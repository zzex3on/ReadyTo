package level1.sub;

/**
 * 이 전화 키패드에서 왼손과 오른손의 엄지손가락만을 이용해서 숫자만을 입력하려고 합니다.
 * 맨 처음 왼손 엄지손가락은 * 키패드에 오른손 엄지손가락은 # 키패드 위치에서 시작하며, 엄지손가락을 사용하는 규칙은 다음과 같습니다.
 * 
 * 엄지손가락은 상하좌우 4가지 방향으로만 이동할 수 있으며 키패드 이동 한 칸은 거리로 1에 해당합니다.
 * 왼쪽 열의 3개의 숫자 1, 4, 7을 입력할 때는 왼손 엄지손가락을 사용합니다.
 * 오른쪽 열의 3개의 숫자 3, 6, 9를 입력할 때는 오른손 엄지손가락을 사용합니다.
 * 가운데 열의 4개의 숫자 2, 5, 8, 0을 입력할 때는 두 엄지손가락의 현재 키패드의 위치에서 더 가까운 엄지손가락을 사용합니다.
 * 4-1. 만약 두 엄지손가락의 거리가 같다면, 오른손잡이는 오른손 엄지손가락, 왼손잡이는 왼손 엄지손가락을 사용합니다.
 * 순서대로 누를 번호가 담긴 배열 numbers, 왼손잡이인지 오른손잡이인 지를 나타내는 문자열 hand가 매개변수로 주어질 때, 
 * 각 번호를 누른 엄지손가락이 왼손인 지 오른손인 지를 나타내는 연속된 문자열 형태로 return 하도록 solution 함수를 완성해주세요.
 * 
 * [제한사항]
 * numbers 배열의 크기는 1 이상 1,000 이하입니다.
 * numbers 배열 원소의 값은 0 이상 9 이하인 정수입니다.
 * hand는 "left" 또는 "right" 입니다.
 * "left"는 왼손잡이, "right"는 오른손잡이를 의미합니다.
 * 왼손 엄지손가락을 사용한 경우는 L, 오른손 엄지손가락을 사용한 경우는 R을 순서대로 이어붙여 문자열 형태로 return 해주세요.
 * 
 * [입출력 예]
 * 
 * numbers								hand		result
 * [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5]	"right"		"LRLLLRLLRRL"
 * 												  1차 LRLRRLLLRRR
 * 												  2차 LRLLLRLLLRL
 * 												  3차 LRLLLRLLRRL
 * [7, 0, 8, 2, 8, 3, 1, 5, 7, 6, 2]	"left"		"LRLLRRLLLRR"
 * 												  1차 LLLLLRLLLRR
 * 												  2차 LRLLRRLLLRR
 * [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]		"right"		"LLRLLRLLRL"
 * 												  1차 LLRLLRLLRL
 *
 */

public class TypingKeyPad {
	char leftJ = '3'; // 왼쪽 손가락 위치 (j의 좌표값)
	char rightJ = '3'; // 오른쪽 손가락 위치 (j의 좌표값)
	char leftK = '0'; // 왼쪽 손가락 위치 (j의 좌표값)
	char rightK = '2'; // 오른쪽 손가락 위치 (j의 좌표값)
	String answer = "";
	public String solution(int[] numbers, String hand) {
		
		String handSub = hand.substring(0, 1).toUpperCase();
		char keyPad[][] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#' }}; // 숫자 키패드
		
		int gapLeft, gapRight;
		
		for (int i = 0; i < numbers.length; i++) {
			char key = Character.forDigit(numbers[i], 10);
			for(int j = 0; j < keyPad.length; j++) {
				for(int k = 0; k <keyPad[j].length; k++) {
					if(Character.compare(key, keyPad[j][k]) == 0) {
						switch(k) {
						case 0:
							insert2Answer("L", j, k);
							break;
						case 2:
							insert2Answer("R", j, k);
							break;
						default:
							// LRLLLRLLRRL
							gapLeft = Math.abs(j - Character.getNumericValue(leftJ)) + Math.abs(k - Character.getNumericValue(leftK)); 
							gapRight = Math.abs(j - Character.getNumericValue(rightJ)) + Math.abs(k - Character.getNumericValue(rightK)); 
							
							if(gapLeft == gapRight) {
								insert2Answer(handSub, j, k);
								break;
							} else if (gapLeft < gapRight) {
								insert2Answer("L", j, k);
							} else {
								insert2Answer("R", j, k);
							}
						}
					}
				}
			}
			System.out.println("answer : " + answer);
		}
		
		// 왼/오 구별
		// 어디 손 잡이인지를 먼저 구별하도록 로직 변경하기
		// LRLLLRLLRRL
		// LRLLRLLLRRL
		/*if((Math.abs(j - Character.getNumericValue(leftJ)) - Math.abs(j - Character.getNumericValue(rightJ))) < 0
				&& (Math.abs(k - Character.getNumericValue(leftK)) - Math.abs(k - Character.getNumericValue(rightK)) > 0)) {
			answer += "L";
			break;
		} else if((Math.abs(j - Character.getNumericValue(leftJ)) - Math.abs(j - Character.getNumericValue(rightJ))) > 0
				&& (Math.abs(k - Character.getNumericValue(leftK)) - Math.abs(k - Character.getNumericValue(rightK))) < 0) {
			answer += "R";
			break;
		} else {
			int a = Math.abs(j - Character.getNumericValue(leftJ)) - Math.abs(j - Character.getNumericValue(rightJ));
			int b = Math.abs(k - Character.getNumericValue(leftK)) - Math.abs(k - Character.getNumericValue(rightK));
			if(!(a > b)) {
				answer += hand.substring(0, 1).toUpperCase();
				break;
			}
		}*/
		
		
        return answer;
    }
	
	public void insert2Answer(String hand, int j, int k) {
		if(hand.equals("L")) {
			leftJ = Character.forDigit(j, 10);
			leftK = Character.forDigit(k, 10);
		} else {
			rightJ = Character.forDigit(j, 10);
			rightK = Character.forDigit(k, 10);
		}
		answer += hand;
	}
}
